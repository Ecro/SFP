<%- include('../partials/header', { title }) %>
<%- include('../partials/sidebar', { title, activeTab }) %>

<!-- Enhanced Storyline Test Generator -->
<div class="row mb-5">
    <div class="col-12">
        <div class="card storyline-test-card animate-slide-in">
            <div class="card-header">
                <div class="header-content-test">
                    <div class="header-left-test">
                        <div class="feature-icon">
                            <i class="bi bi-lightbulb"></i>
                        </div>
                        <div class="header-info">
                            <h5 class="mb-0">Storyline Test Generator</h5>
                            <p class="mb-0 text-muted">Generate AI-powered video storyline suggestions from trending topics</p>
                        </div>
                    </div>
                    <div class="header-actions-test">
                        <button class="action-btn secondary" onclick="showTestHistory()" title="View Test History">
                            <i class="bi bi-clock-history"></i>
                        </button>
                        <button class="action-btn info" onclick="window.location.reload()" title="Refresh Page">
                            <i class="bi bi-arrow-clockwise"></i>
                        </button>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <!-- Test Configuration Form -->
                <div id="testForm" class="mb-4">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label for="categoryInput" class="form-label">
                                Category Filter (Optional)
                                <small class="text-muted">- Leave blank for all trending topics</small>
                            </label>
                            <input type="text" class="form-control" id="categoryInput" 
                                   placeholder="e.g., technology, lifestyle, entertainment..."
                                   autocomplete="off">
                            <div class="form-text">
                                Enter a category to focus trends, or leave blank to discover from all categories
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label for="contentStyleSelect" class="form-label">Content Style</label>
                            <select class="form-select" id="contentStyleSelect">
                                <option value="educational">Educational</option>
                                <option value="entertainment">Entertainment</option>
                                <option value="news">News</option>
                                <option value="lifestyle">Lifestyle</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="limitSelect" class="form-label">Suggestions Count</label>
                            <select class="form-select" id="limitSelect">
                                <option value="5">5 Suggestions</option>
                                <option value="10" selected>10 Suggestions</option>
                                <option value="15">15 Suggestions</option>
                            </select>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-12">
                            <button type="button" class="btn btn-primary btn-lg" onclick="runStorylineTest()" id="runTestBtn">
                                <i class="bi bi-play-circle"></i>
                                Run Test
                            </button>
                            <small class="text-muted ms-3">
                                This will analyze current trends and generate storyline suggestions (no cost until you click "Go")
                            </small>
                        </div>
                    </div>
                </div>

                <!-- Loading State -->
                <div id="loadingState" class="text-center py-5" style="display: none;">
                    <div class="spinner-border text-primary mb-3" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <h5>Analyzing Current Trends...</h5>
                    <p class="text-muted">
                        Discovering trending topics and generating storyline suggestions...
                        <br>
                        <span id="loadingStep">Fetching trends from multiple sources...</span>
                    </p>
                    <div class="progress mx-auto" style="max-width: 400px;">
                        <div class="progress-bar progress-bar-striped progress-bar-animated" 
                             id="progressBar" role="progressbar" style="width: 20%"></div>
                    </div>
                </div>

                <!-- Results Display -->
                <div id="resultsContainer" style="display: none;">
                    <!-- Test Summary -->
                    <div class="alert alert-success" id="testSummary">
                        <h6 class="alert-heading">
                            <i class="bi bi-check-circle"></i>
                            Test Completed Successfully!
                        </h6>
                        <p class="mb-0" id="summaryText"></p>
                    </div>

                    <!-- Storyline Cards Grid -->
                    <div class="row" id="storylineGrid">
                        <!-- Storyline cards will be populated here -->
                    </div>
                </div>

                <!-- Empty State -->
                <div id="emptyState" class="text-center py-5">
                    <i class="bi bi-lightbulb text-muted" style="font-size: 4rem;"></i>
                    <h4 class="mt-3 text-muted">Ready to Generate Storylines</h4>
                    <p class="text-muted mb-4">
                        Enter an optional category filter and click "Run Test" to discover trending topics<br>
                        and generate 10 engaging video storyline suggestions.
                    </p>
                    <div class="d-flex justify-content-center gap-3">
                        <div class="text-center">
                            <i class="bi bi-search text-info" style="font-size: 2rem;"></i>
                            <div class="small text-muted mt-1">Trend Discovery</div>
                        </div>
                        <div class="text-center">
                            <i class="bi bi-arrow-right text-muted" style="font-size: 1.5rem;"></i>
                        </div>
                        <div class="text-center">
                            <i class="bi bi-robot text-warning" style="font-size: 2rem;"></i>
                            <div class="small text-muted mt-1">AI Script Generation</div>
                        </div>
                        <div class="text-center">
                            <i class="bi bi-arrow-right text-muted" style="font-size: 1.5rem;"></i>
                        </div>
                        <div class="text-center">
                            <i class="bi bi-collection-play text-success" style="font-size: 2rem;"></i>
                            <div class="small text-muted mt-1">10 Storylines</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Storyline Detail Modal -->
<div class="modal fade" id="storylineModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-file-text"></i>
                    <span id="modalTitle">Storyline Details</span>
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="modalBody">
                <!-- Content will be populated by JavaScript -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-success" id="modalGoBtn" onclick="selectStorylineFromModal()">
                    <i class="bi bi-play-circle"></i>
                    Go - Start Production
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Test History Modal -->
<div class="modal fade" id="historyModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-clock-history"></i>
                    Storyline Test History
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="historyModalBody">
                <!-- History content will be populated by JavaScript -->
            </div>
        </div>
    </div>
</div>

<script>
let currentTestData = null;
let currentStorylineId = null;

async function runStorylineTest() {
    const category = document.getElementById('categoryInput').value.trim();
    const contentStyle = document.getElementById('contentStyleSelect').value;
    const limit = parseInt(document.getElementById('limitSelect').value);
    
    // Show loading state
    document.getElementById('emptyState').style.display = 'none';
    document.getElementById('resultsContainer').style.display = 'none';
    document.getElementById('loadingState').style.display = 'block';
    document.getElementById('runTestBtn').disabled = true;
    
    // Simulate loading progress
    updateLoadingProgress(20, 'Analyzing current trends...');
    
    try {
        const response = await fetch('/api/test/storylines', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                category: category || undefined,
                contentStyle,
                limit,
                language: 'ko'
            })
        });
        
        updateLoadingProgress(60, 'Generating storyline scripts...');
        
        const result = await response.json();
        
        if (!result.success) {
            throw new Error(result.message || 'Failed to generate storylines');
        }
        
        updateLoadingProgress(90, 'Finalizing suggestions...');
        
        // Small delay for UX
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        updateLoadingProgress(100, 'Complete!');
        
        // Display results
        currentTestData = result.data;
        displayResults(result.data);
        
    } catch (error) {
        console.error('Storyline test error:', error);
        showNotification('Failed to generate storylines: ' + error.message, 'error');
        
        // Show empty state again
        document.getElementById('loadingState').style.display = 'none';
        document.getElementById('emptyState').style.display = 'block';
    } finally {
        document.getElementById('runTestBtn').disabled = false;
    }
}

function updateLoadingProgress(percent, step) {
    document.getElementById('progressBar').style.width = percent + '%';
    document.getElementById('loadingStep').textContent = step;
}

function displayResults(data) {
    document.getElementById('loadingState').style.display = 'none';
    
    // Update summary
    const summaryText = `Generated ${data.storylines.length} storylines from ${data.totalTopicsAnalyzed} trending topics in ${(data.executionTime / 1000).toFixed(1)}s`;
    document.getElementById('summaryText').textContent = summaryText;
    
    // Clear and populate storyline grid
    const grid = document.getElementById('storylineGrid');
    grid.innerHTML = '';
    
    data.storylines.forEach((storyline, index) => {
        const card = createStorylineCard(storyline, index);
        grid.appendChild(card);
    });
    
    document.getElementById('resultsContainer').style.display = 'block';
}

function createStorylineCard(storyline, index) {
    const col = document.createElement('div');
    col.className = 'col-md-6 col-lg-4 mb-4';
    
    const difficultyColor = {
        'easy': 'success',
        'medium': 'warning',
        'hard': 'danger'
    }[storyline.difficulty] || 'secondary';
    
    const appealColor = {
        'Very High': 'success',
        'High': 'info',
        'Medium': 'warning',
        'Low': 'danger'
    }[storyline.engagementPrediction.audienceAppeal] || 'secondary';
    
    col.innerHTML = `
        <div class="card h-100 storyline-card" style="cursor: pointer;" onclick="showStorylineDetail('${storyline.id}')">
            <div class="card-header d-flex justify-content-between align-items-start">
                <div>
                    <span class="badge bg-${difficultyColor}">${storyline.difficulty.toUpperCase()}</span>
                    <span class="badge bg-${appealColor} ms-1">${storyline.engagementPrediction.audienceAppeal}</span>
                </div>
                <small class="text-muted">#${index + 1}</small>
            </div>
            <div class="card-body">
                <h6 class="card-title" title="${storyline.script.title}">
                    ${storyline.script.title.length > 50 ? storyline.script.title.substring(0, 47) + '...' : storyline.script.title}
                </h6>
                <p class="card-text text-muted small">
                    <strong>Topic:</strong> ${storyline.topic.keyword}
                    <br>
                    <strong>Category:</strong> ${storyline.topic.category}
                </p>
                <div class="mb-2">
                    <div class="small text-muted">Hook Preview:</div>
                    <div class="text-primary small">
                        "${storyline.script.hook.length > 80 ? storyline.script.hook.substring(0, 77) + '...' : storyline.script.hook}"
                    </div>
                </div>
                <div class="mb-2">
                    <div class="small text-muted">Summary:</div>
                    <div class="small">
                        ${storyline.summary.length > 100 ? storyline.summary.substring(0, 97) + '...' : storyline.summary}
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <small class="text-muted">
                            <i class="bi bi-eye"></i> ${storyline.estimatedViews.toLocaleString()}
                        </small>
                        <br>
                        <small class="text-muted">
                            <i class="bi bi-heart"></i> ${storyline.engagementPrediction.score}/100
                        </small>
                    </div>
                    <button class="btn btn-success btn-sm" onclick="selectStoryline('${storyline.id}', event)">
                        <i class="bi bi-play-circle"></i>
                        Go
                    </button>
                </div>
            </div>
        </div>
    `;
    
    return col;
}

function showStorylineDetail(storylineId) {
    const storyline = currentTestData.storylines.find(s => s.id === storylineId);
    if (!storyline) return;
    
    currentStorylineId = storylineId;
    
    document.getElementById('modalTitle').textContent = storyline.script.title;
    
    const modalBody = document.getElementById('modalBody');
    modalBody.innerHTML = `
        <div class="row">
            <div class="col-md-6">
                <h6>Topic Information</h6>
                <table class="table table-sm">
                    <tr><td><strong>Keyword:</strong></td><td>${storyline.topic.keyword}</td></tr>
                    <tr><td><strong>Category:</strong></td><td>${storyline.topic.category}</td></tr>
                    <tr><td><strong>Trend Score:</strong></td><td>${storyline.topic.score}/100</td></tr>
                    <tr><td><strong>Estimated Views:</strong></td><td>${storyline.estimatedViews.toLocaleString()}</td></tr>
                </table>
            </div>
            <div class="col-md-6">
                <h6>Engagement Prediction</h6>
                <table class="table table-sm">
                    <tr><td><strong>Score:</strong></td><td>${storyline.engagementPrediction.score}/100</td></tr>
                    <tr><td><strong>Appeal:</strong></td><td>${storyline.engagementPrediction.audienceAppeal}</td></tr>
                    <tr><td><strong>Difficulty:</strong></td><td>${storyline.difficulty}</td></tr>
                    <tr><td><strong>Tone:</strong></td><td>${storyline.script.tone}</td></tr>
                </table>
            </div>
        </div>
        
        <hr>
        
        <div class="mb-3">
            <h6>Script Preview</h6>
            <div class="border rounded p-3">
                <div class="mb-2">
                    <strong>Hook (${storyline.script.hook.length} chars):</strong>
                    <div class="text-primary">"${storyline.script.hook}"</div>
                </div>
                <div class="mb-2">
                    <strong>Main Content:</strong>
                    <div>${storyline.script.mainContent}</div>
                </div>
                <div class="mb-2">
                    <strong>Call to Action:</strong>
                    <div class="text-success">"${storyline.script.callToAction}"</div>
                </div>
            </div>
        </div>
        
        <div class="mb-3">
            <h6>Engagement Factors</h6>
            <div>
                ${storyline.engagementPrediction.factors.map(factor => 
                    `<span class="badge bg-info me-1 mb-1">${factor}</span>`
                ).join('')}
            </div>
        </div>
        
        <div class="mb-3">
            <h6>Keywords & Tags</h6>
            <div class="mb-2">
                <strong>Keywords:</strong>
                ${storyline.script.keywords.map(keyword => 
                    `<span class="badge bg-primary me-1">${keyword}</span>`
                ).join('')}
            </div>
            <div>
                <strong>Tags:</strong>
                ${storyline.tags.map(tag => 
                    `<span class="badge bg-secondary me-1">${tag}</span>`
                ).join('')}
            </div>
        </div>
    `;
    
    const modal = new bootstrap.Modal(document.getElementById('storylineModal'));
    modal.show();
}

function selectStorylineFromModal() {
    if (currentStorylineId) {
        selectStoryline(currentStorylineId);
        bootstrap.Modal.getInstance(document.getElementById('storylineModal')).hide();
    }
}

async function selectStoryline(storylineId, event) {
    if (event) {
        event.stopPropagation();
    }
    
    if (!currentTestData) {
        showNotification('No test data available', 'error');
        return;
    }
    
    const storyline = currentTestData.storylines.find(s => s.id === storylineId);
    if (!storyline) {
        showNotification('Storyline not found', 'error');
        return;
    }
    
    // Confirm action
    const confirmed = confirm(
        `Start video production for "${storyline.script.title}"?\n\n` +
        `This will trigger API calls for video generation, narration, and uploading, which may incur costs.\n\n` +
        `Topic: ${storyline.topic.keyword}\n` +
        `Estimated Views: ${storyline.estimatedViews.toLocaleString()}\n` +
        `Engagement Score: ${storyline.engagementPrediction.score}/100`
    );
    
    if (!confirmed) return;
    
    try {
        showNotification('Starting video production...', 'info');
        
        const response = await fetch(`/api/test/storylines/${currentTestData.testId}/select/${storylineId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        const result = await response.json();
        
        if (result.success) {
            showNotification(
                `Video production started! Job ID: ${result.data.videoJobId}. Check the Pipeline tab for progress.`, 
                'success'
            );
            
            // Update the card to show it was selected
            const card = document.querySelector(`[onclick*="${storylineId}"]`);
            if (card) {
                card.style.opacity = '0.7';
                const goBtn = card.querySelector('.btn-success');
                if (goBtn) {
                    goBtn.innerHTML = '<i class="bi bi-check"></i> Selected';
                    goBtn.className = 'btn btn-outline-success btn-sm';
                    goBtn.disabled = true;
                }
            }
        } else {
            throw new Error(result.message || 'Failed to start video production');
        }
    } catch (error) {
        console.error('Selection error:', error);
        showNotification('Failed to start video production: ' + error.message, 'error');
    }
}

async function showTestHistory() {
    try {
        const response = await fetch('/api/test/storylines/history');
        const result = await response.json();
        
        if (!result.success) {
            throw new Error(result.message || 'Failed to load history');
        }
        
        const historyBody = document.getElementById('historyModalBody');
        
        if (result.data.tests.length === 0) {
            historyBody.innerHTML = `
                <div class="text-center py-4">
                    <i class="bi bi-clock-history text-muted" style="font-size: 3rem;"></i>
                    <h5 class="mt-3 text-muted">No Test History</h5>
                    <p class="text-muted">Run your first storyline test to see history here.</p>
                </div>
            `;
        } else {
            historyBody.innerHTML = `
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Category</th>
                                <th>Storylines</th>
                                <th>Execution Time</th>
                                <th>Action Taken</th>
                                <th>Topics Analyzed</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${result.data.tests.map(test => `
                                <tr>
                                    <td>${new Date(test.timestamp).toLocaleString()}</td>
                                    <td>${test.category || '<em>All Categories</em>'}</td>
                                    <td>${test.storylines_generated}</td>
                                    <td>${(test.execution_time_ms / 1000).toFixed(1)}s</td>
                                    <td>
                                        <span class="badge bg-${test.user_action === 'generated_video' ? 'success' : test.user_action === 'selected' ? 'warning' : 'secondary'}">
                                            ${test.user_action === 'generated_video' ? 'Video Created' : test.user_action === 'selected' ? 'Selected' : 'None'}
                                        </span>
                                    </td>
                                    <td>${test.total_topics_analyzed}</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                </div>
            `;
        }
        
        const modal = new bootstrap.Modal(document.getElementById('historyModal'));
        modal.show();
    } catch (error) {
        console.error('History error:', error);
        showNotification('Failed to load test history: ' + error.message, 'error');
    }
}

// Auto-focus on category input when page loads
document.addEventListener('DOMContentLoaded', function() {
    document.getElementById('categoryInput').focus();
    
    // Enable Enter key to run test
    document.getElementById('categoryInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            runStorylineTest();
        }
    });
});
</script>

<style>
.storyline-card {
    transition: transform 0.2s, box-shadow 0.2s;
}

.storyline-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.progress {
    height: 8px;
}

.badge {
    font-size: 0.7em;
}

.card-title {
    font-size: 0.95rem;
    font-weight: 600;
}

.modal-lg {
    max-width: 800px;
}
</style>

<%- include('../partials/footer') %>